// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/ONSdigital/dp-authorisation/v2/authorisation"
	dprequest "github.com/ONSdigital/dp-net/v3/request"
	"sync"
)

// Ensure, that ZebedeeClientMock does implement authorisation.ZebedeeClient.
// If this is not the case, regenerate this file with moq.
var _ authorisation.ZebedeeClient = &ZebedeeClientMock{}

// ZebedeeClientMock is a mock implementation of authorisation.ZebedeeClient.
//
//	func TestSomethingThatUsesZebedeeClient(t *testing.T) {
//
//		// make and configure a mocked authorisation.ZebedeeClient
//		mockedZebedeeClient := &ZebedeeClientMock{
//			CheckTokenIdentityFunc: func(ctx context.Context, token string) (*dprequest.IdentityResponse, error) {
//				panic("mock out the CheckTokenIdentity method")
//			},
//		}
//
//		// use mockedZebedeeClient in code that requires authorisation.ZebedeeClient
//		// and then make assertions.
//
//	}
type ZebedeeClientMock struct {
	// CheckTokenIdentityFunc mocks the CheckTokenIdentity method.
	CheckTokenIdentityFunc func(ctx context.Context, token string) (*dprequest.IdentityResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// CheckTokenIdentity holds details about calls to the CheckTokenIdentity method.
		CheckTokenIdentity []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
		}
	}
	lockCheckTokenIdentity sync.RWMutex
}

// CheckTokenIdentity calls CheckTokenIdentityFunc.
func (mock *ZebedeeClientMock) CheckTokenIdentity(ctx context.Context, token string) (*dprequest.IdentityResponse, error) {
	if mock.CheckTokenIdentityFunc == nil {
		panic("ZebedeeClientMock.CheckTokenIdentityFunc: method is nil but ZebedeeClient.CheckTokenIdentity was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
	}{
		Ctx:   ctx,
		Token: token,
	}
	mock.lockCheckTokenIdentity.Lock()
	mock.calls.CheckTokenIdentity = append(mock.calls.CheckTokenIdentity, callInfo)
	mock.lockCheckTokenIdentity.Unlock()
	return mock.CheckTokenIdentityFunc(ctx, token)
}

// CheckTokenIdentityCalls gets all the calls that were made to CheckTokenIdentity.
// Check the length with:
//
//	len(mockedZebedeeClient.CheckTokenIdentityCalls())
func (mock *ZebedeeClientMock) CheckTokenIdentityCalls() []struct {
	Ctx   context.Context
	Token string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
	}
	mock.lockCheckTokenIdentity.RLock()
	calls = mock.calls.CheckTokenIdentity
	mock.lockCheckTokenIdentity.RUnlock()
	return calls
}
